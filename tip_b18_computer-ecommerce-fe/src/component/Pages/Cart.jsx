import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import { Container, Row, Col, Form, Button, Image, InputGroup } from "react-bootstrap";
import axios from "axios"; // Th√™m axios v√†o

const CartPage = () => {
  const [cart, setCart] = useState([]);
  const [customer, setCustomer] = useState({ name: "", phone: "", address: "" });
  const [loading, setLoading] = useState(true); // Th√™m loading ƒë·ªÉ qu·∫£n l√Ω tr·∫°ng th√°i t·∫£i
  const navigate = useNavigate();

  // G·ªçi API ƒë·ªÉ l·∫•y gi·ªè h√†ng khi component ƒë∆∞·ª£c mount
  useEffect(() => {
    // Th·ª±c hi·ªán g·ªçi API ƒë·ªÉ l·∫•y gi·ªè h√†ng
    axios
      .get("http://192.168.199.43:8080/api/carts/getCartByUserId/{userId}")
      .then((response) => {
        setCart(response.data); // C·∫≠p nh·∫≠t gi·ªè h√†ng t·ª´ API
        setLoading(false); 
      })
      .catch((error) => {
        console.error("C√≥ l·ªói x·∫£y ra khi l·∫•y gi·ªè h√†ng", error);
        setLoading(false); 
      });
  }, []);

  // H√†m x·ª≠ l√Ω thay ƒë·ªïi s·ªë l∆∞·ª£ng s·∫£n ph·∫©m trong gi·ªè
  const handleQuantityChange = (id, delta) => {
    setCart(
      cart.map((item) =>
        item.id === id
          ? { ...item, quantity: Math.max(1, item.quantity + delta) } // ƒê·∫£m b·∫£o s·ªë l∆∞·ª£ng kh√¥ng nh·ªè h∆°n 1
          : item
      )
    );
  };

  // H√†m x·ª≠ l√Ω vi·ªác ch·ªçn ho·∫∑c b·ªè ch·ªçn s·∫£n ph·∫©m
  const handleSelectItem = (id) => {
    setCart(
      cart.map((item) =>
        item.id === id ? { ...item, selected: !item.selected } : item
      )
    );
  };

  // H√†m x·ª≠ l√Ω x√≥a s·∫£n ph·∫©m kh·ªèi gi·ªè h√†ng
  const handleRemoveItem = (id) => {
    setCart(cart.filter((item) => item.id !== id));
  };

  // H√†m ch·ªçn ho·∫∑c b·ªè ch·ªçn t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè
  const handleSelectAll = (checked) => {
    setCart(cart.map((item) => ({ ...item, selected: checked })));
  };

  // T√≠nh t·ªïng ti·ªÅn c·ªßa gi·ªè h√†ng (ch·ªâ t√≠nh c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn)
  const total = cart
    .filter((item) => item.selected) // l·ªçc sp ƒë∆∞·ª£c ch·ªçn
    .reduce((sum, item) => sum + item.price * item.quantity, 0); // t·ªïng ti·ªÅn

  // H√†m x·ª≠ l√Ω thanh to√°n (g·ªçi API b·∫±ng axios)
  const handleBuy = () => {
    const orderData = {
      id: "unique-order-id",  // ID ƒë∆°n h√†ng (c√≥ th·ªÉ t·ª± t·∫°o ho·∫∑c l·∫•y t·ª´ auth)
      cart: cart
        .filter(item => item.selected)  // L·ªçc c√°c s·∫£n ph·∫©m ƒë√£ ch·ªçn
        .map(item => ({
          productId: item.id,
          nameProduct: item.name,
          thumbnail: item.image,
          quantity: item.quantity,
          unitPrice: item.price,
          totalPrice: item.price * item.quantity,
        })),
      totalPrice: total,  // T·ªïng ti·ªÅn gi·ªè h√†ng
    };

    const apiUrl = "/"; // URL API thanh to√°n

    // G·ªçi API v·ªõi axios
    axios
      .post(apiUrl, orderData) // G·ªçi API thanh to√°n
      .then((response) => {
        console.log("Thanh to√°n th√†nh c√¥ng", response.data);
        navigate('/HomePage'); // ƒêi·ªÅu h∆∞·ªõng sau khi thanh to√°n th√†nh c√¥ng
      })
      .catch((error) => {
        console.error("C√≥ l·ªói x·∫£y ra khi thanh to√°n", error);
      });
  };

  // N·∫øu ƒëang t·∫£i d·ªØ li·ªáu th√¨ hi·ªÉn th·ªã th√¥ng b√°o loading
  if (loading) {
    return <div>Loading...</div>;
  }

  return (
    <Container className="py-5">
      <Row>
        <Col md={8}>
          <h5> Xem th√™m s·∫£n ph·∫©m kh√°c</h5>
          {/* Checkbox ch·ªçn t·∫•t c·∫£ */}
          <Form.Check
            type="checkbox"
            label="Ch·ªçn t·∫•t c·∫£"
            className="my-3"
            onChange={(e) => handleSelectAll(e.target.checked)} // G·ªçi h√†m ch·ªçn t·∫•t c·∫£ khi checkbox thay ƒë·ªïi
          />
          {/* Duy·ªát qua t·∫•t c·∫£ s·∫£n ph·∫©m trong gi·ªè */}
          {cart.map((item) => (
            <Row key={item.id} className="align-items-center border-top py-3">
              <Col xs={1}>
                {/* Checkbox ch·ªçn s·∫£n ph·∫©m */}
                <Form.Check
                  type="checkbox"
                  checked={item.selected}
                  onChange={() => handleSelectItem(item.id)} // X·ª≠ l√Ω khi checkbox thay ƒë·ªïi
                />
              </Col>
              <Col xs={2}>
                {/* H√¨nh ·∫£nh s·∫£n ph·∫©m */}
                <Image src={item.image} thumbnail />
              </Col>
              <Col xs={5}>{item.name}</Col>
              <Col xs={2}>
                {/* Gi√° s·∫£n ph·∫©m v√† gi√° c≈© */}
                <div className="text-danger fw-bold">{item.price.toLocaleString()}‚Ç´</div>
                <div>
                  <del>{item.oldPrice.toLocaleString()}‚Ç´</del> -7%
                </div>
              </Col>
              <Col xs={1}>
                {/* ƒêi·ªÅu ch·ªânh s·ªë l∆∞·ª£ng s·∫£n ph·∫©m */}
                <InputGroup size="sm">
                  <Button
                    variant="outline-secondary"
                    onClick={() => handleQuantityChange(item.id, -1)} // Gi·∫£m s·ªë l∆∞·ª£ng
                  >
                    -
                  </Button>
                  <Form.Control
                    value={item.quantity}
                    readOnly
                    style={{ width: "40px", textAlign: "center" }}
                  />
                  <Button
                    variant="outline-secondary"
                    onClick={() => handleQuantityChange(item.id, 1)} // TƒÉng s·ªë l∆∞·ª£ng
                  >
                    +
                  </Button>
                </InputGroup>
              </Col>
              <Col xs={1}>
                {/* N√∫t x√≥a s·∫£n ph·∫©m */}
                <Button
                  variant="link"
                  className="text-danger"
                  onClick={() => handleRemoveItem(item.id)} // X·ª≠ l√Ω khi x√≥a s·∫£n ph·∫©m
                >
                  üóë
                </Button>
              </Col>
            </Row>
          ))}
        </Col>

        <Col md={4} className="border p-3">
          <h6>Th√¥ng tin kh√°ch h√†ng</h6>
          {/* C√°c tr∆∞·ªùng nh·∫≠p li·ªáu th√¥ng tin kh√°ch h√†ng */}
          <Form.Control
            placeholder="T√™n Kh√°ch H√†ng"
            className="mb-2"
            onChange={(e) => setCustomer({ ...customer, name: e.target.value })} // C·∫≠p nh·∫≠t t√™n kh√°ch h√†ng
          />
          <Form.Control
            placeholder="S·ªë ƒêi·ªán Tho·∫°i"
            className="mb-2"
            onChange={(e) => setCustomer({ ...customer, phone: e.target.value })} // C·∫≠p nh·∫≠t s·ªë ƒëi·ªán tho·∫°i
          />
          <Form.Control
            as="textarea"
            rows={2}
            placeholder="ƒê·ªãa Ch·ªâ Nh·∫≠n H√†ng"
            className="mb-3"
            onChange={(e) => setCustomer({ ...customer, address: e.target.value })} // C·∫≠p nh·∫≠t ƒë·ªãa ch·ªâ
          />

          <h6>Th√¥ng Tin ƒê∆°n H√†ng</h6>
          <p>Ph√≠ V·∫≠n Chuy·ªÉn: Mi·ªÖn Ph√≠</p>
          <p>T·ªïng Ti·ªÅn: {total.toLocaleString()}‚Ç´</p> {/* Hi·ªÉn th·ªã t·ªïng ti·ªÅn */}
          <Button variant="danger" className="w-100" onClick={handleBuy}>
            Thanh To√°n
          </Button>
        </Col>
      </Row>
    </Container>
  );
};

export default CartPage;
