import React, { useState, useEffect } from "react";
import { useNavigate } from "react-router-dom";
import {Container,Row,Col,Form,Button,Image,InputGroup,} from "react-bootstrap";
import axiosInstance from "../Author/axiosInstance";

const CartPage = () => {
  const [cart, setCart] = useState([]);
  const [customer, setCustomer] = useState({ name: "", phone: "", address: "" });
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const currentUser = JSON.parse(localStorage.getItem("currentUser"));
    const userId = currentUser?.id;

    if (!userId) {
      console.error("Ch∆∞a ƒëƒÉng nh·∫≠p ho·∫∑c thi·∫øu userId.");
      setLoading(false);
      return;
    }

    axiosInstance
      .get(`http://192.168.199.43:8080/api/carts/getCartByUserId/${userId}`)
      .then((response) => {
        const cartData = response.data?.cartDetails || [];
        const formattedCart = cartData.map((item) => ({
          id: item.productId,
          name: item.nameProduct,
          thumbnail: item.thumbnail,
          quantity: item.quantity,
          price: item.unitPrice,
          oldPrice: item.unitPrice * 1.1,
          selected: true, // m·∫∑c ƒë·ªãnh ch·ªçn s·∫£n ph·∫©m
        }));
        setCart(formattedCart);
        setLoading(false);
      })
      .catch((error) => {
        console.error("L·ªói khi l·∫•y gi·ªè h√†ng:", error);
        setLoading(false);
      });
  }, []);

  const handleQuantityChange = (id, delta) => {
    setCart(
      cart.map((item) =>
        item.id === id
          ? { ...item, quantity: Math.max(1, item.quantity + delta) }
          : item
      )
    );
  };

  const handleSelectItem = (id) => {
    setCart(
      cart.map((item) =>
        item.id === id ? { ...item, selected: !item.selected } : item
      )
    );
  };

  const handleRemoveItem = (id) => {
    setCart(cart.filter((item) => item.id !== id));
  };

  const handleSelectAll = (checked) => {
    setCart(cart.map((item) => ({ ...item, selected: checked })));
  };

  const total = cart
    .filter((item) => item.selected)
    .reduce((sum, item) => sum + (item.price || 0) * item.quantity, 0);

  const handleBuy = () => {
    const currentUser = JSON.parse(localStorage.getItem("currentUser"));
    if (!currentUser?.id) return alert("B·∫°n c·∫ßn ƒëƒÉng nh·∫≠p ƒë·ªÉ thanh to√°n.");

    const orderData = {
      userId: currentUser.id,
      cartDetails: cart
        .filter((item) => item.selected)
        .map((item) => ({
          productId: item.id,
          nameProduct: item.name,
          thumbnail: item.thumbnail,
          quantity: item.quantity,
          unitPrice: item.price,
          totalPrice: item.price * item.quantity,
        })),
      totalPrice: total,
    };

    axiosInstance
      .post("http://192.168.199.43:8080/api/orders/create", orderData)
      .then((response) => {
        console.log("Thanh to√°n th√†nh c√¥ng", response.data);
        alert("ƒê·∫∑t h√†ng th√†nh c√¥ng!");
        navigate("/HomePage");
      })
      .catch((error) => {
        console.error("C√≥ l·ªói x·∫£y ra khi thanh to√°n", error);
        alert("ƒê·∫∑t h√†ng th·∫•t b·∫°i. Vui l√≤ng th·ª≠ l·∫°i.");
      });
  };

  if (loading) return <div>Loading...</div>;

  return (
    <Container className="py-5">
      <Row>
        <Col md={8}>
          <a href="/ProDuct">‚¨Ö Xem th√™m s·∫£n ph·∫©m kh√°c</a>

          <Form.Check
            type="checkbox"
            label="Ch·ªçn t·∫•t c·∫£"
            className="my-3"
            checked={cart.every((item) => item.selected)}
            onChange={(e) => handleSelectAll(e.target.checked)}
          />

          {cart.length === 0 && <p>Kh√¥ng c√≥ s·∫£n ph·∫©m trong gi·ªè h√†ng.</p>}

          {cart.map((item) => (
            <Row key={item.id} className="align-items-center border-top py-3">
              <Col xs={1}>
                <Form.Check
                  type="checkbox"
                  checked={item.selected}
                  onChange={() => handleSelectItem(item.id)}
                />
              </Col>
              <Col xs={2}>
                <Image src={item.thumbnail} thumbnail />
              </Col>
              <Col xs={5}>{item.name}</Col>
              <Col xs={2}>
                <div className="text-danger fw-bold">
                  {(item.price || 0).toLocaleString()}‚Ç´
                </div>
                <div>
                  <del>{(item.oldPrice || 0).toLocaleString()}‚Ç´</del>
                </div>
              </Col>
              <Col xs={1}>
                <InputGroup size="sm">
                  <Button
                    variant="outline-secondary"
                    onClick={() => handleQuantityChange(item.id, -1)}
                  >
                    -
                  </Button>
                  <Form.Control
                    value={item.quantity}
                    readOnly
                    style={{ width: "40px", textAlign: "center" }}
                  />
                  <Button
                    variant="outline-secondary"
                    onClick={() => handleQuantityChange(item.id, 1)}
                  >
                    +
                  </Button>
                </InputGroup>
              </Col>
              <Col xs={1}>
                <Button
                  variant="link"
                  className="text-danger"
                  onClick={() => handleRemoveItem(item.id)}
                >
                  üóë
                </Button>
              </Col>
            </Row>
          ))}
        </Col>

        <Col md={4} className="border p-3">
          <h6>Th√¥ng tin kh√°ch h√†ng</h6>
          <Form.Control
            placeholder="T√™n Kh√°ch H√†ng"
            className="mb-2"
            onChange={(e) => setCustomer({ ...customer, name: e.target.value })}
          />
          <Form.Control
            placeholder="S·ªë ƒêi·ªán Tho·∫°i"
            className="mb-2"
            onChange={(e) => setCustomer({ ...customer, phone: e.target.value })}
          />
          <Form.Control
            as="textarea"
            rows={2}
            placeholder="ƒê·ªãa Ch·ªâ Nh·∫≠n H√†ng"
            className="mb-3"
            onChange={(e) => setCustomer({ ...customer, address: e.target.value })}
          />

          <h6>Th√¥ng tin ƒë∆°n h√†ng</h6>
          <p>Ph√≠ v·∫≠n chuy·ªÉn: <strong>Mi·ªÖn ph√≠</strong></p>
          <p>T·ªïng ti·ªÅn: <strong>{total.toLocaleString()}‚Ç´</strong></p>
          <Button variant="danger" className="w-100" onClick={handleBuy}>
            Thanh To√°n
          </Button>
        </Col>
      </Row>
    </Container>
  );
};

export default CartPage;
